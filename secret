Secrets are used to store sensitive information, like password or keys. They are similar to ConfigMaps except that they are stored in an encoded format.  As with ConfigMap there are two steps involved in working with secrets.

Step0: 
Generate a hash value of the password and pass it to secret-data.yaml definition value as a value to DB_Password variable.
$ echo -n "mysql" | base64
$ echo -n "root" | base64
$ echo -n "paswrd"| base64


Step1: Create the secret and 
*****************************
apiVersion: v1
kind: Secret
metadata:
 name: app-secret
data:
  DB_Host: bX1zcWw=
  DB_User: cm9vdA==
  DB_Password: cGFzd3Jk
  
 
 $ kubectl create -f secret-data.yaml
  
step2: Inject it into pod
****************************  
 apiVersion: v1
 kind: Pod
 metadata:
   name: simple-webapp-color
 spec:
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
    - containerPort: 8080
    envFrom:
    - secretRef:
        name: app-secret



$ kubectl create -f pod-definition.yaml


The Imperative way
********************
$ kubectl create secret generic app-secret --from-literal=DB_Host=mysql --from-literal=DB_User=root --from-literal=DB_Password=paswrd
$ kubectl create secret generic app-secret --from-file=app_secret.properties


$ kubectl get secrets
$ kubectl describe secret
$ kubectl get secret app-secret -o yaml




Decode Secrets
*****************
$ echo -n "bX1zcWw=" | base64 --decode
$ echo -n "cm9vdA==" | base64 --decode
$ echo -n "cGFzd3Jk" | base64 --decode
```
